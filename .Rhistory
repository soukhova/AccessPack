guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_avail / plot_c_access
#transform CRS
toronto_muni_bound <- st_transform(AccessPack::toronto_muni_bound, crs=32617)
#select only zones within Toronto Municipality
TO_taz <- ggh_taz_acc %>%
filter(st_intersects(., toronto_muni_bound, sparse = FALSE)[,1]) %>% select(GTA06, AREA, jobs)
#select only zones within Toronto Municipality
TO_taz <- ggh_taz_acc %>%
filter(st_intersects(., toronto_muni_bound, sparse = FALSE)[,1]) %>% dplyr::select(GTA06, AREA, jobs)
#jobs at destinations IN Toronto and origins from anywhere; workers are associated with the origin (ggh) and jobs with the destination (Toronto)
TO_od_ft <- od_ft %>% select(-V_ij) %>% filter(Destination %in% TO_taz$GTA06)
#jobs at destinations IN Toronto and origins from anywhere; workers are associated with the origin (ggh) and jobs with the destination (Toronto)
TO_od_ft <- od_ft %>% dplyr::select(-V_ij) %>% filter(Destination %in% TO_taz$GTA06)
#calculate accessibility for workers from any origin to jobs in Toronto
TO_c_accessibility <- TO_od_ft %>%
mutate(TO_A_ij = f * jobs) %>%
group_by(Origin) %>%
summarise(TO_A_i = sum(TO_A_ij, na.rm = T),
trips_i = sum(trips, na.rm = T))
#Merge TO accessibly calculation to the ggh_taz:
TO_taz_acc <- ggh_taz %>% merge(TO_c_accessibility, by.x=c("GTA06"), by.y=c("Origin"), all.y=T)
#calculate spatial availability
TO_od_ft <- TO_od_ft %>%
mutate(TO_V_ij = sp_avail(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
r = catch,
f = f))
sum(TO_od_ft$TO_V_ij, na.rm=T)
sum_jobs <- TO_od_ft %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
sum(sum_jobs$jobs, na.rm = T)
TO_availability <- TO_od_ft %>%
group_by(Origin) %>%
summarize(TO_V_i = sum(TO_V_ij))
#Merge TO availability calculation to the TAZ sf object created for accessibility above:
TO_taz_acc <- TO_taz_acc %>% merge(TO_availability, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
plot_avail <- ggplot() +
geom_sf(data = TO_taz_acc,
aes(fill= TO_V_i), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")+
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_c_access <- ggplot() +
geom_sf(data = TO_taz_acc,
aes(fill= TO_A_i), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")+
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_avail / plot_c_access
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
theme_classic()
gamma_ = fitdist(data=all_tt, "gamma")
lnorm_ = fitdist(data=all_tt, "lnorm")
plot(gamma_) / plot(lnorm_)
aic <- (gamma_$aic,lnorm_$aic)
aic <- c(gamma_$aic, lnorm_$aic)
aic
kable(aic, "html")
Distribution <-  c("Gamma", "Lognormal")
AIC <- c(gamma_$aic, lnorm_$aic)
df <- data.frame(Distribution, AIC)
kable(df, "html")
kable(gamma_ %>% summary, "html")
kable(gamma_ %>% summary(), "html")
kable(summary(gamma_), "html")
summary(gamma_)
summary(gamma_)
gamma_ %>% summary()
gamma_ %>% summary()
kable(gamma_ %>% summary(), "html")
gamma_ %>% summary() %>% data.frame()
gamma_ %>% summary()
gamma_ %>% dyplr::summary()
gamma_ %>% dpylr::summary()
gamma_ %>% dplyr:summary()
gamma_ %>% dplyr::summary()
gamma_ %>% fitdistrplus::::summary()
gamma_ %>% fitdistrplus::summary()
gamma_ %>% print()
gamma_ %>% logLik()
gamma_ %>% vcov()
gamma_ %>% coef()
kable(gamma_ %>% print(), "html")
kable(gamma_ %>% print())
kable(gamma_ %>% print(), "html", caption = "correlation")
kable(gamma_ %>% summary(), "html", caption = "correlation")
kable(gamma_ %>% coef(), "html")
cdfcomp(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
denscomp(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
cdfcomp(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
plot(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
plot(gamma_)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 7,
fig.height = 7
)
options(scipen = 999)
library(AccessPack)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(patchwork)
library(sf)
library(MASS)
library(fitdistrplus)
library(logspline)
plot_ggh <- ggplot() +
geom_sf(data = ggh_taz,
aes(fill= workers/AREA), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt") +
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
devtools::document()
devtools::check()
devtools::build()
devtools::install()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 7,
fig.height = 7
)
options(scipen = 999)
library(AccessPack)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(patchwork)
library(sf)
library(MASS)
library(fitdistrplus)
library(logspline)
plot_ggh <- ggplot() +
geom_sf(data = ggh_taz,
aes(fill= workers/AREA), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt") +
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_ggh
kable(od_ft_tt %>% summary(), "html")
# Generate a random variates which follow a gamma distribution
x <- rgamma(1000, shape = 2, rate = 0.1)
# Covert to probability density function (PDF)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
theme_classic()
tld <- od_ft_tt %>%
mutate(tt_classes = cut(travel_time,
150,
ordered_result = TRUE)) %>%
group_by(tt_classes) %>%
summarize(trips = sum(trips),
travel_time = mean(travel_time))
ggplot(data = tld,
aes(x =travel_time, y = trips)) +
geom_point()
# Generate a random variates which follow a gamma distribution
x <- rgamma(1000, shape = 2, rate = 0.1)
# Covert to probability density function (PDF)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
theme_classic()
# remove all NA trips from dataset and set all 0min travel times to 0.1min
od_ft_tt  <- od_ft_tt %>% filter( !is.na(travel_time)) %>% mutate(travel_time = ifelse(travel_time == 0, 0.1, travel_time))
all_tt <- od_ft_tt  %>% dplyr::select(trips, travel_time)
all_tt <- all_tt[rep(seq_len(dim(all_tt)[1]), all_tt$trips), 2]
descdist(data=all_tt)
#using fitdist package to fit a distribution using the default maximum liklihood estimation method and Nelder-Mead method for direct optimization
gamma_ = fitdist(data=all_tt, "gamma", method="mle", optim.method="Nelder-Mead")
lnorm_ = fitdist(data=all_tt, "lnorm", method="mle", optim.method="Nelder-Mead")
cdfcomp_plot <- cdfcomp(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
denscomp_plot <- denscomp(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
qqcomp_plot <- qqcomp(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
ppcomp_plot <- ppcomp(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
wrap_plots(cdfcomp_plot, denscomp_plot, qqcomp_plot, ppcomp_plot)
wrap_plots(list(cdfcomp_plot, denscomp_plot, qqcomp_plot, ppcomp_plot))
gofstat(list(gamma_, lnorm_), legendtext=c("gamma", "lognormal"))
gofstat(list(gamma_, lnorm_))
norm_ = fitdist(data=all_tt, "norm", method="mle", optim.method="Nelder-Mead")
gofstat(list(gamma_, lnorm_, norm_))
ks.test(all_tt, "pgamma", mean(all_tt), sd(all_tt))
kable(gamma_ %>% summary(), "html", caption = "correlation")
kable(gamma_ %>% coef(), "html")
kable(x = gamma_ %>% coef(), "html")
kable(gamma <- gamma_ %>% coef(), "html")
Distribution <-  c("Gamma", "Lognormal")
AIC <- c(gamma_$aic, lnorm_$aic, norm_$aic)
BIC <- c(gamma_$bic, lnorm_$bic, norm_$bic)
df <- data.frame(Distribution, AIC, BIC)
Distribution <-  c("Gamma", "Lognormal", "Normal")
AIC <- c(gamma_$aic, lnorm_$aic, norm_$aic)
BIC <- c(gamma_$bic, lnorm_$bic, norm_$bic)
df <- data.frame(Distribution, AIC, BIC)
kable(df, "html")
exp_ = fitdist(data=all_tt, "exp", method="mle", optim.method="Nelder-Mead")
Distribution <-  c("Gamma", "Lognormal", "Exp")
AIC <- c(gamma_$aic, lnorm_$aic, exp_$aic)
BIC <- c(gamma_$bic, lnorm_$bic, exp_$bic)
df <- data.frame(Distribution, AIC, BIC)
kable(df, "html")
beta_= fitdist(data=all_tt, "beta", method="mle", optim.method="Nelder-Mead")
Distribution <-  c("Gamma", "Exp", "Normal", "Lognormal" )
AIC <- c(gamma_$aic, exp_$aic, norm_$aic, lnorm_$aic)
BIC <- c(gamma_$bic, exp_$abic, norm_$bic, lnorm_$bic)
df <- data.frame(Distribution, AIC, BIC)
Distribution <-  c("Gamma", "Exp", "Normal", "Lognormal" )
AIC <- c(gamma_$aic, exp_$aic, norm_$aic, lnorm_$aic)
BIC <- c(gamma_$bic, exp_$bic, norm_$bic, lnorm_$bic)
df <- data.frame(Distribution, AIC, BIC)
kable(df, "html")
Distribution <-  c("Gamma", "Exp", "Lognormal", "Normal")
AIC <- c(gamma_$aic, exp_$aic, lnorm_$aic, norm_$aic)
BIC <- c(gamma_$bic, exp_$bic, lnorm_$bic, norm_$bic)
df <- data.frame(Distribution, AIC, BIC)
kable(df, "html")
Distribution <-  c("Gamma", "Exp", "Lognormal", "Normal")
AIC <- c(gamma_$aic, exp_$aic, lnorm_$aic, norm_$aic)
BIC <- c(gamma_$bic, exp_$bic, lnorm_$bic, norm_$bic)
df <- data.frame(Distribution, AIC, BIC)
kable(df, "html")
ggplot(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
geom_point(size = 3) +
geom_line(aes(x=travel_time, y=dgamma(travel_time, gamma_$estimate["shape"], gamma_$estimate["rate"])),
color="red", size = 1) +
theme_classic()
kable(gamma_ %>% coef(), "html")
#dgamma is the density plot for gamma function
od_ft_tt <- od_ft_tt %>%
mutate(f = dgamma(travel_time, gamma_$estimate["shape"], gamma_$estimate["rate"]))
plot(y=od_ft_tt$f, x=od_ft_tt$travel_time)
#add the number of jobs and workers to the od_ft_tt matrix
od_ft <- od_ft_tt %>% merge(ggh_taz %>% dplyr::select(GTA06, workers) %>% st_drop_geometry(),
by.x = "Origin", by.y="GTA06", all.x = TRUE)
od_ft <- od_ft %>% merge(ggh_taz %>% dplyr::select(GTA06, jobs) %>% st_drop_geometry(),
by.x = "Destination", by.y="GTA06", all.x = TRUE)
# calculate accessibility
c_accessibility <- od_ft %>%
mutate(A_ij = f * jobs) %>%
group_by(Origin) %>%
summarise(A_i = sum(A_ij, na.rm = T),
trips_i = sum(trips, na.rm = T))
ggh_taz_acc <- ggh_taz %>% merge(c_accessibility, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
plot_c_access <- ggplot() +
geom_sf(data = ggh_taz_acc,
aes(fill= A_i), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt")+
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_c_access
od_ft <- od_ft %>%
mutate(catch = 1) %>%
mutate(V_ij = sp_avail(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
r = catch,
f = f))
sum(od_ft$V_ij, na.rm=T)
sum_jobs <- od_ft %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
sum(sum_jobs$jobs, na.rm = T)
availability <- od_ft %>%
group_by(Origin) %>%
summarize(V_i = sum(V_ij))
availability
ggh_taz_acc <- ggh_taz_acc %>% merge(availability, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
plot_avail <- ggplot() +
geom_sf(data = ggh_taz_acc,
aes(fill= V_i), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt")+
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_avail
plot_avail <- ggplot() +
geom_sf(data = ggh_taz_acc,
aes(fill= V_i), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt") +
geom_sf(data = AccessPack::toronto_muni_bound, colour="black", fill=NA) +
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_c_access <- ggplot() +
geom_sf(data = ggh_taz_acc,
aes(fill= A_i), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt") +
geom_sf(data = AccessPack::toronto_muni_bound, colour="black", fill=NA)+
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_avail / plot_c_access
#transform CRS
toronto_muni_bound <- st_transform(AccessPack::toronto_muni_bound, crs=32617)
#select only zones within Toronto Municipality
TO_taz <- ggh_taz_acc %>%
filter(st_intersects(., toronto_muni_bound, sparse = FALSE)[,1]) %>% dplyr::select(GTA06, AREA, jobs)
#jobs at destinations IN Toronto and origins from anywhere; workers are associated with the origin (ggh) and jobs with the destination (Toronto)
TO_od_ft <- od_ft %>% dplyr::select(-V_ij) %>% filter(Destination %in% TO_taz$GTA06)
#calculate accessibility for workers from any origin to jobs in Toronto
TO_c_accessibility <- TO_od_ft %>%
mutate(TO_A_ij = f * jobs) %>%
group_by(Origin) %>%
summarise(TO_A_i = sum(TO_A_ij, na.rm = T),
trips_i = sum(trips, na.rm = T))
#Merge TO accessibly calculation to the ggh_taz:
TO_taz_acc <- ggh_taz %>% merge(TO_c_accessibility, by.x=c("GTA06"), by.y=c("Origin"), all.y=T)
#calculate spatial availability
TO_od_ft <- TO_od_ft %>%
mutate(TO_V_ij = sp_avail(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
r = catch,
f = f))
sum(TO_od_ft$TO_V_ij, na.rm=T)
sum_jobs <- TO_od_ft %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
sum(sum_jobs$jobs, na.rm = T)
TO_availability <- TO_od_ft %>%
group_by(Origin) %>%
summarize(TO_V_i = sum(TO_V_ij))
#Merge TO availability calculation to the TAZ sf object created for accessibility above:
TO_taz_acc <- TO_taz_acc %>% merge(TO_availability, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
plot_avail <- ggplot() +
geom_sf(data = TO_taz_acc,
aes(fill= TO_V_i), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")+
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_c_access <- ggplot() +
geom_sf(data = TO_taz_acc,
aes(fill= TO_A_i), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")+
guides(size = "none") +
theme(legend.position = "right",
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))
plot_avail / plot_c_access
ggplot(data = tld,
aes(x =travel_time, y = trips)) +
ylim(0, 250000) +
geom_point()
ggplot(data = tld,
aes(x =travel_time, y = trips)) +
ylim(0, 225000) +
geom_point()
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
ylim(0, 0.09) +
theme_classic()
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
ylim(0, 0.075) +
theme_classic()
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
ylim(0, 0.09) +
theme_classic()
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
ylim(0, 0.08) +
theme_classic()
# Generate a random variates which follow a gamma distribution
x <- rgamma(1000, shape = 2, rate = 0.1)
# Covert to probability density function (PDF)
den <- density(x)
dat <- data.frame(x = den$x, y = den$y)
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
ylim(0, 0.07) +
theme_classic()
# Plot density as points
ggplot() +
geom_point(data = dat, aes(x = x, y = y), size = 3, colour="red") +
geom_point(data = tld, aes(x = travel_time, y = trips/sum(trips))) +
ylim(0, 0.08) +
theme_classic()
ggplot(data = tld,
aes(x =travel_time, y = trips)) +
ylim(0, 225000) +
geom_point()+
theme_classic()
# using fitdist package to fit a distribution using the default maximum liklihood estimation method and Nelder-Mead method for direct optimization
gamma_ = fitdist(data=all_tt, "gamma", method="mle", optim.method="Nelder-Mead")
plot(gamma_) / plot(lnorm_)
ggsave(filename = "images/gamma_comp.png")
plot(gamma_)
ggsave(filename = "images/gamma_comp.png")
gamma_comp <- plot(gamma_)
gamma_comp
gamma_comp
install.packages("webshot")
install.packages("webshot")
ggsave("gamma_comp.png")
library(AccessPack)
library(dplyr)
library(ggplot2)
library(kableExtra)
library(patchwork)
library(sf)
library(MASS)
library(fitdistrplus)
library(logspline)
ggsave("gamma_comp.png")
plot(lnorm_)
knitr::include_graphics("images/gamma_comp.png")
knitr::include_graphics("images/gamma_comp.png")
knitr::include_graphics("images/gamma_comp.png")
knitr::include_graphics("images/lnorm_comp.png")
devtools::document()
devtools::check()
devtools::build()
devtools::install()
devtools::build_readme()
devtools::install(build_vignettes = TRUE)
pkgdown::build_site()
View(od_ft_tt)
AccessPack::od_ft_tt
pkgdown::build_site()
devtools::install(build_vignettes = TRUE)
pkgdown::build_site()
.Last.error.trace
devtools::install(build_vignettes = TRUE)
pkgdown::build_site()
knitr::include_graphics("images/g_2.png")
knitr::include_graphics("images/lno_3.png")
devtools::install(build_vignettes = TRUE)
devtools::build()
# SET build_vignettes to TRUE
devtools::install(build_vignettes = TRUE)
pkgdown::build_site()
pkgdown::build_site()
.Last.error.trace
devtools::install(build_vignettes = TRUE)
pkgdown::build_site()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
pkgdown::build_site()
knitr::include_graphics("g_2.png")
n
knitr::include_graphics("images/g_2.png")
knitr::include_graphics("images/lno_3.png")
pkgdown::build_site()
devtools::install(build_vignettes = TRUE)
pkgdown::build_site()
