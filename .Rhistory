scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Spatially Availability \n(V_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
tts_tt_per_trip <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_tt_trips_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Spatially Availability \n(V_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
tts_total_tt / tts_tt_per_trip
View(GGH_taz_acc)
# remove all NA trips from dataset and set all 0min travel times to 0.1 min
od_ft_tt  <- AccessPack::od_ft_tt %>%
filter( !is.na(travel_time)) %>%
mutate(travel_time = ifelse(travel_time == 0, 0.1, travel_time))
all_tt <- od_ft_tt  %>%
dplyr::select(trips, travel_time)
all_tt <- all_tt[rep(seq_len(dim(all_tt)[1]), all_tt$trips), 2]
# transfer calibrated impedance function values to OD matrix
od_ft_tt <- od_ft_tt %>%
mutate(f = dgamma(travel_time, gamma_$estimate["shape"], gamma_$estimate["rate"]))
#add the number of jobs and workers to the od_ft_tt matrix
od_ft <- od_ft_tt %>% merge(ggh_taz %>% dplyr::select(GTA06, workers) %>% st_drop_geometry(),
by.x = "Origin", by.y="GTA06", all.x = TRUE)
od_ft <- od_ft %>% merge(ggh_taz %>% dplyr::select(GTA06, jobs) %>% st_drop_geometry(),
by.x = "Destination", by.y="GTA06", all.x = TRUE)
#calculate accessibility for workers from any origin to jobs in Toronto
GGH_c_accessibility <- od_ft %>%
mutate(GGH_A_ij = f * jobs) %>%
group_by(Origin) %>%
summarise(GGH_A_i = sum(GGH_A_ij, na.rm = T))
#Merge TO accessibly calculation to the ggh_taz:
GGH_taz_acc <- ggh_taz %>% merge(GGH_c_accessibility, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
#calculate spatial availability
GGH_od_ft <- od_ft %>%
mutate(catch = 1) %>%
mutate(GGH_V_ij = sp_avail(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
r = catch,
f = f))
#verify that the sum of all jobs is consistent with the number of jobs
sum(GGH_od_ft$GGH_V_ij, na.rm=T)
sum_jobs <- GGH_od_ft %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
sum(sum_jobs$jobs, na.rm = T)
#aggregating spatial availability
GGH_availability <- GGH_od_ft %>%
group_by(Origin) %>%
summarize(GGH_V_i = sum(GGH_V_ij),
GGH_sum_tt_i = sum(travel_time),
GGH_tt_trips_i = sum(travel_time)/mean(workers),
GGH_sum_f_i = sum(f),
GGH_f_trips_i = sum(f)/mean(workers))
#Merge TO availability calculation to the TAZ sf object created for accessibility above:
GGH_taz_acc <- GGH_taz_acc %>% merge(GGH_availability, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
tts_total_tt <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_sum_tt_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Spatially Availability \n(V_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
tts_tt_per_trip <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_tt_trips_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Spatially Availability \n(V_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
tts_total_tt / tts_tt_per_trip
summary(GGH_taz_acc$GGH_tt_trips_i)
knitr::include_graphics("images/Greater-Golden-Horseshoe-Map.png")
# remove all NA trips from dataset and set all 0min travel times to 0.1 min
od_ft_tt  <- AccessPack::od_ft_tt %>%
filter( !is.na(travel_time)) %>%
mutate(travel_time = ifelse(travel_time == 0, 0.1, travel_time))
all_tt <- od_ft_tt  %>%
dplyr::select(trips, travel_time)
all_tt <- all_tt[rep(seq_len(dim(all_tt)[1]), all_tt$trips), 2]
# transfer calibrated impedance function values to OD matrix
od_ft_tt <- od_ft_tt %>%
mutate(f = dgamma(travel_time, gamma_$estimate["shape"], gamma_$estimate["rate"]))
#add the number of jobs and workers to the od_ft_tt matrix
od_ft <- od_ft_tt %>% merge(ggh_taz %>% dplyr::select(GTA06, workers) %>% st_drop_geometry(),
by.x = "Origin", by.y="GTA06", all.x = TRUE)
od_ft <- od_ft %>% merge(ggh_taz %>% dplyr::select(GTA06, jobs) %>% st_drop_geometry(),
by.x = "Destination", by.y="GTA06", all.x = TRUE)
#calculate accessibility for workers from any origin to jobs in Toronto
GGH_c_accessibility <- od_ft %>%
mutate(GGH_A_ij = f * jobs) %>%
group_by(Origin) %>%
summarise(GGH_A_i = sum(GGH_A_ij, na.rm = T))
#Merge TO accessibly calculation to the ggh_taz:
GGH_taz_acc <- ggh_taz %>% merge(GGH_c_accessibility, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
#calculate spatial availability
GGH_od_ft <- od_ft %>%
mutate(catch = 1) %>%
mutate(GGH_V_ij = sp_avail(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
r = catch,
f = f))
#verify that the sum of all jobs is consistent with the number of jobs
sum(GGH_od_ft$GGH_V_ij, na.rm=T)
sum_jobs <- GGH_od_ft %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
sum(sum_jobs$jobs, na.rm = T)
#aggregating spatial availability
GGH_availability <- GGH_od_ft %>%
group_by(Origin) %>%
summarize(GGH_V_i = sum(GGH_V_ij),
GGH_sum_tt_i = sum(travel_time),
GGH_tt_trips_i = mean(travel_time),
GGH_sum_f_i = sum(f),
GGH_f_trips_i = mean(f))
#Merge TO availability calculation to the TAZ sf object created for accessibility above:
GGH_taz_acc <- GGH_taz_acc %>% merge(GGH_availability, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
tts_total_tt <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_sum_tt_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Total travel time \n(min)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
tts_tt_per_trip <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_tt_trips_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Average travel time \n(min)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
tts_total_tt / tts_tt_per_trip
# For some reason plot(gamma_) does not play well with knitr, so instead we save the figure and then include it as a graphic in the following chunk
png("images/impedance_function.png")
plot(gamma_)
dev.off()
knitr::include_graphics("images/impedance_function.png")
## accessibility
#creating the main plot
mplot_access_TTS_GGH <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_A_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Accessibility \n(A_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
## spatial availability
mplot_SA_TTS_GGH <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_V_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Spatially Availability \n(V_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80)) # positing legend and clipping out white space
mplot_access_TTS_GGH / mplot_SA_TTS_GGH
tts_total_tt <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_sum_tt_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Total travel time \n(min)",
na.value = "grey90") +
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))+
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
tts_tt_per_trip <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_tt_trips_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Average travel time \n(min)",
na.value = "grey90") +
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))+
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
tts_total_tt / tts_tt_per_trip
## accessibility
#creating the main plot
mplot_access_TTS_GGH <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_A_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Accessibility \n(A_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))+
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
## spatial availability
mplot_SA_TTS_GGH <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_V_i), color = NA) + #data
scale_fill_distiller(palette = "Spectral", #legend scale bar
name = "Spatially Availability \n(V_i)",
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))+
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
mplot_access_TTS_GGH / mplot_SA_TTS_GGH
mplot_SApW_TTS_GGH <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_V_i/workers), color = NA) + #data
scale_fill_gradient2(low = "deepskyblue4",
mid = "ghostwhite",
high = "red", #legend scale bar
name = "Spatially Availability \n per Worker (v_i)",
limits = c(0, max(GGH_taz_acc$GGH_V_i/GGH_taz_acc$workers)),
midpoint= benchmark_GGH_V_i_workers, #average V_i per capita
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80))# positing legend and clipping out white space
mplot_SApW_TTS_GGH
benchmark_GGH_V_i_workers <- GGH_taz_acc %>% st_drop_geometry() %>% summarise(avg_VO = sum(GGH_V_i, na.rm = TRUE)/sum(workers, na.rm = TRUE)) %>% as.numeric()
mplot_SApW_TTS_GGH <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_V_i/workers), color = NA) + #data
scale_fill_gradient2(low = "deepskyblue4",
mid = "ghostwhite",
high = "red", #legend scale bar
name = "Spatially Availability \n per Worker (v_i)",
limits = c(0, max(GGH_taz_acc$GGH_V_i/GGH_taz_acc$workers)),
midpoint= benchmark_GGH_V_i_workers, #average V_i per capita
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm")) +
theme_void() +
theme(legend.position = c(1.15, 0.75),
plot.margin = margin(t = 0, r = 0, b = 0, l = -80))# positing legend and clipping out white space
mplot_SApW_TTS_GGH
mplot_SApW_TTS_GGH <- ggplot() +
geom_sf(data = GGH_taz_acc, aes(fill= GGH_V_i/workers), color = NA) + #data
scale_fill_gradient2(low = "deepskyblue4",
mid = "ghostwhite",
high = "red", #legend scale bar
name = "Spatially Availability \n per Worker (v_i)",
limits = c(0, max(GGH_taz_acc$GGH_V_i/GGH_taz_acc$workers)),
midpoint= benchmark_GGH_V_i_workers, #average V_i per capita
na.value = "grey90") +
geom_sf(data = toronto_muni_bound, # border for Toronto
colour=alpha("dimgrey",1),
size = 0.5, fill=NA,
show.legend = "polygon") +
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))+
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
mplot_SApW_TTS_GGH
tts_workers <- ggplot() +
geom_sf(data = ggh_taz,
aes(fill= workers), color = NA) +
scale_fill_distiller(palette = "Spectral",
name = "Number of full-time \nemployed people",
limits = c(0, max(ggh_taz$workers)),
na.value = "grey90")+
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA)) +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
tts_jobs <- ggplot() +
geom_sf(data = ggh_taz,
aes(fill= jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt",
name = "Number of full-time \njobs (square root scale)",
limits = c(0, max(ggh_taz$jobs)),
na.value = "grey90")+
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))+
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
tts_workers / tts_jobs
tts_workers / tts_jobs
tts_workers <- ggplot() +
geom_sf(data = ggh_taz,
aes(fill= workers), color = NA) +
scale_fill_distiller(palette = "Spectral",
name = "Full-time employed people",
limits = c(0, max(ggh_taz$workers)),
na.value = "grey90")+
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA)) +
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
tts_jobs <- ggplot() +
geom_sf(data = ggh_taz,
aes(fill= jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt",
name = "Full-time jobs \n(square root scale)",
limits = c(0, max(ggh_taz$jobs)),
na.value = "grey90")+
theme(legend.position = "right", axis.text = element_blank(),
panel.grid = element_blank(),
panel.background = element_rect(size = 1,
color = "black",
fill = NA))+
annotation_north_arrow(location = "tl", # north arrow for both the main plot and inset
height = unit(0.8, "cm"),
width = unit(0.8, "cm"),
style = north_arrow_orienteering(line_width = 0.25,
line_col = "dimgrey",
fill = c("white","dimgrey"))) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
height = unit(0.15, "cm"))
tts_workers / tts_jobs
tts_workers / tts_jobs
