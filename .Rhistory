#   x <- x %>%
#     dplyr::mutate(f_t = (f_p * f_c) / sum_pa)
#
#   x <- x %>%
#     dplyr::mutate(v_ij = !!opp * f_t)
#
#   return(x$v_ij)
# }
beta <- 0.0015
od_table <- toy_od_table %>%
mutate(f = exp(-beta * distance))
od_table_using2 <- od_table %>%
mutate(V_ij = sp_avail2(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f))
sum(od_table_using2$V_ij)
availability <- od_table_using2 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij))
availability
beta <- 0.0015
od_table <- toy_od_table %>%
mutate(f = exp(-beta * distance))
od_table_using1 <- od_table %>%
mutate(V_ij = sp_avail(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f))
library(AccessPack)
library(dplyr)
library(ggplot2)
library(sf)
beta <- 0.0015
od_table <- toy_od_table %>%
mutate(f = exp(-beta * distance))
od_table <- od_table %>%
mutate(V_ij = sp_avail(.,
o_id = Origin,
d_id = "Destination",
pop = Population,
opp = Jobs,
f = f))
od_table_using1 <- od_table %>%
mutate(V_ij = sp_avail(.,
o_id = Origin,
d_id = "Destination",
pop = Population,
opp = Jobs,
f = f))
beta <- 0.0015
od_table <- toy_od_table %>%
mutate(f = exp(-beta * distance))
od_table_using1 <- od_table %>%
mutate(V_ij = sp_avail(.,
o_id = Origin,
d_id = "Destination",
pop = Population,
opp = Jobs,
f = f))
Compare(od_table_using1, od_table_using2)
identical(od_table_using1, od_table_using2)
system.time({ od_table_using1 <- od_table %>%
mutate(V_ij = sp_avail(.,
o_id = Origin,
d_id = "Destination",
pop = Population,
opp = Jobs,
f = f)) })
system.time({ od_table %>%
mutate(V_ij = sp_avail2(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f)) })
devtools::use_r("sp_avail3")
usethis::use_r("sp_avail3")
devtools::document()
devtools::document()
devtools::check()
devtools::build()
library(AccessPack)
library(AccessPack)
library(dplyr)
library(ggplot2)
od_table %>%
mutate(V_ij = sp_avail3(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f))
devtools::document()
devtools::build()
devtools::build()
library(AccessPack)
library(dplyr)
library(ggplot2)
library(sf)
beta <- 0.0015
od_table <- toy_od_table %>%
mutate(f = exp(-beta * distance))
od_table <- od_table %>%
mutate(V_ij = sp_avail3(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f))
od_table %>%
mutate(V_ij = sp_avail3(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f))
beta <- 0.0015
od_table <- toy_od_table %>%
mutate(f = exp(-beta * distance))
system.time({ od_table %>%
mutate(V_ij = sp_avail3(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f)) })
od_table_using3 <- od_table %>%
mutate(V_ij = sp_avail3(.,
o_id = Origin,
d_id = Destination,
pop = Population,
opp = Jobs,
f = f))
identical(od_table_using3, od_table_using2)
od_ft_tt <- od_ft_tt
AccessPack::gtha_taz
sum_pop <- od_table %>%
distinct(Origin,
.keep_all = TRUE) %>%
mutate(sum_pop = Population^alpha) %>%
pull(sum_pop) %>%
sum()
load("od_table.rda")
sum_pop <- toy_od_table %>%
distinct(Origin,
.keep_all = TRUE) %>%
mutate(sum_pop = Population^alpha) %>%
pull(sum_pop) %>%
sum()
AccessPack::toy_od_table
toy_od_table <- AccessPack::toy_od_table
View(toy_od_table)
gtha_taz <- AccessPack::gtha_taz
od_ft_tt <- od_ft_tt
od_ft <- od_ft_tt %>% merge(gtha_taz %>% select(GTA06, workers, jobs) %>% st_drop_geometry(),
by = "GTA06", all.x = T)
od_ft <- od_ft_tt %>% merge(gtha_taz %>% select(GTA06, workers) %>% st_drop_geometry(),
by.x = "Origin", by.y="GTA06", all.x = T)
od_ft <- od_ft %>% merge(gtha_taz %>% select(GTA06, jobs) %>% st_drop_geometry(),
by.x = "Destination", by.y="GTA06", all.x = T)
View(od_ft)
beta <- 0.0015
od_ft <- od_ft  %>%
mutate(f = exp(-beta * travel_time))
od_ft_tt_using3 <- od_ft %>%
mutate(V_ij = sp_avail3(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
f = f))
View(od_ft_tt_using3)
sum(od_ft_tt_using3$V_ij)
sum(od_ft_tt_using3$V_ij, na.rm=T)
sum(od_ft_tt_using3$jobs, na.rm=T)
sum(od_ft_tt_using3$Persons, na.rm=T)
sum(od_ft_tt_using3$V_ij, na.rm=T)
sum(od_ft_tt_using3$Persons, na.rm=T)
View(toy_od_table)
sum(toy_od_table$jobs)
sum(toy_od_table$Jobs)
sum(od_ft_tt_using3$V_ij, na.rm=T)
od_ft_tt_using3 %>% group_by(Destination) %>% summarise(jobs = sum(jobs))
#
# sum(od_ft_tt_using3$Persons, na.rm=T)
od_ft_tt_using3 %>% group_by(Destination) %>% sum(jobs)
od_ft_tt_using3 %>% group_by(Destination) %>% sum(od_ft_tt_using3$job)
od_ft_tt_using3 %>% group_by(Destination) %>% sum(od_ft_tt_using3$jobs)
od_ft_tt_using3 %>% group_by(Destination) %>% summarise(jobs )
od_ft_tt_using3 %>% group_by(Destination) %>% summarise(jobs = sum(jobs))
sum(sum_jobs$jobs)
sum_jobs <- od_ft_tt_using3 %>% group_by(Destination) %>% summarise(jobs = sum(jobs))
sum(sum_jobs$jobs)
View(sum_jobs)
sum_jobs <- od_ft_tt_using3 %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
View(sum_jobs)
View(od_ft_tt_using3)
sum(sum_jobs$jobs)
sum_jobs <- od_ft_tt_using3 %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
sum(sum_jobs$jobs)
View(sum_jobs)
sum(sum_jobs$jobs, na.rm = T)
sum(od_ft_tt_using3$V_ij, na.rm=T)
sum(sum_jobs$jobs, na.rm = T)
sum(od_ft_tt_using3$V_ij, na.rm=T)
sum_jobs <- od_ft_tt_using3 %>% group_by(Destination) %>% summarise(jobs = mean(jobs))
sum(sum_jobs$jobs, na.rm = T)
availability <- od_table_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij))
availability <- od_ft_tt_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij))
availability
availability <- od_ft_tt_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij),
trips = sum(Persons))
availability
availability <- od_ft_tt_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij),
jobs = sum(jobs))
availability
availability <- od_ft_tt_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij),
jobs = mean(jobs))
availability
availability <- od_ft_tt_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij),
jobtrips = mean(Persons))
availability
availability <- od_ft_tt_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij),
jobtrips = sum(Persons))
availability
availability <- od_ft_tt_using3 %>%
group_by(Origin) %>%
summarize(avail_jobs = sum(V_ij),
job_trips_from_Origin = sum(Persons))
availability
ggplot(availability, aes(x=avail_jobs, y=job_trips_from_Origin)) + geom_point()
ggplot(availability, aes(y=avail_jobs, x=job_trips_from_Origin)) + geom_point()
View(availability)
availability %>% mutate(avail_jobs = ifelse(is.na(avail_jobs), 0, avail_jobs))
#plot jobs vs trips taken - I'm curious
ggplot(availability, aes(y=avail_jobs, x=job_trips_from_Origin)) + geom_point()
# set null avail_jobs to 0
availability <- availability %>% mutate(avail_jobs = ifelse(is.na(avail_jobs), 0, avail_jobs))
#plot jobs vs trips taken - I'm curious
ggplot(availability, aes(y=avail_jobs, x=job_trips_from_Origin)) + geom_point()
#plot jobs vs trips taken - I'm curious
ggplot(availability, aes(x=avail_jobs, y=job_trips_from_Origin)) + geom_point()
od_ft %>% filter(travel_time <= 45) %>% group_by(Destination) %>% summarise(jobs_i = sum(jobs, na.rm = T))
od_ft %>% filter(travel_time <= 45) %>% group_by(Destination) %>% summarise(jobs_i = sum(jobs, na.rm = T))
od_ft %>% filter(travel_time <= 45) %>% group_by(Origin) %>% summarise(jobs_i = sum(jobs, na.rm = T))
od_ft %>% filter(travel_time <= 45) %>% group_by(Origin) %>% summarise(c_accessibility = sum(jobs, na.rm = T))
od_ft %>% filter(travel_time <= 45) %>% group_by(Origin) %>% summarise(c_accessibility = sum(jobs, na.rm = T))
c_accessibility <- od_ft %>% filter(travel_time <= 45) %>% group_by(Origin) %>% summarise(c_accessibility = sum(jobs, na.rm = T))
measures <- availability %>% merge(c_accessibility, by = "Origin")
measures <- availability %>% merge(c_accessibility, by = "Origin", all.x=T)
c_accessibility <- od_ft %>% filter(travel_time <= 45) %>% group_by(Origin) %>% summarise(c_access_jobs = sum(jobs, na.rm = T))
measures <- availability %>% merge(c_accessibility, by = "Origin", all.x=T)
measure <- measure %>% mutate(c_accessibility = ifelse(is.na(avail_jobs), 0, avail_jobs))
c_accessibility <- od_ft %>% filter(travel_time <= 45) %>% group_by(Origin) %>% summarise(c_access_jobs = sum(jobs, na.rm = T))
measures <- availability %>% merge(c_accessibility, by = "Origin", all.x=T)
measure <- measures %>% mutate(c_access_jobs = ifelse(is.na(c_access_jobs), 0, c_access_jobs))
measures <- measures %>% mutate(c_access_jobs = ifelse(is.na(c_access_jobs), 0, c_access_jobs))
View(measures)
c_accessibility <- od_ft %>% filter(travel_time <= 45) %>% group_by(Destination) %>% summarise(c_access_jobs = sum(jobs, na.rm = T))
measures <- availability %>% merge(c_accessibility, by = "Origin", all.x=T)
c_accessibility <- od_ft %>% filter(travel_time <= 45) %>% group_by(Destination) %>% summarise(c_access_jobs = sum(jobs, na.rm = T))
measures <- availability %>% merge(c_accessibility, by = "Destination", all.x=T)
c_accessibility <- od_ft %>% filter(travel_time <= 45) %>% group_by(Destination) %>% summarise(c_access_jobs = sum(jobs, na.rm = T))
measures <- availability %>% merge(c_accessibility, by.x = "Origin" ,by.y = "Destination", all.x=T)
measures <- measures %>% mutate(c_access_jobs = ifelse(is.na(c_access_jobs), 0, c_access_jobs))
measures_i <- gtha_taz %>% merge(measures, by.x=c("GTA06"), by.y=c("Origin"), all.x=T)
View(measures_i)
ggplot() +
geom_sf(data = measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_c_access <- ggplot() +
geom_sf(data = c_access_jobs,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_c_access <- ggplot() +
geom_sf(data = measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_avail + plot_c_access
plot_avail <- ggplot() +
geom_sf(data = measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_avail + plot_c_access
library(patchwork)
plot_avail + plot_c_access
plot_avail / plot_c_access
TO_measures_i <- st_intersects(measures_i, AccessPack::toronto_muni_bound)
st_crs(measures_i)
st_crs(toronto_muni_bound)
st_crs(measures_i)
toronto_muni_bound <- st_transform(AccessPack::toronto_muni_bound, crs=32617)
TO_measures_i <- st_intersects(measures_i, toronto_muni_bound)
TO_measures_i <- st_intersects(toronto_muni_bound, measures_i)
TO_measures_i <- st_intersection(toronto_muni_bound, measures_i)
TO_measures_i <- st_intersection(measures_i, toronto_muni_bound)
TO_measures_i <- st_intersects(measures_i, toronto_muni_bound)
View(TO_measures_i)
TO_measures_i <- st_intersection(measures_i, toronto_muni_bound)
TO_measures_i <- st_overlaps(measures_i, toronto_muni_bound)
View(TO_measures_i)
TO_measures_i <- st_touches(measures_i, toronto_muni_bound)
View(TO_measures_i)
measures_i[which(unlist(st_touches(toronto_muni_bound, measures_i)) == 1)]
measures_i[which(unlist(st_touches(measures_i, toronto_muni_bound)) == 1)]
TO_measures_i <- st_intersects(measures_i, toronto_muni_bound)
TO_measures_i <- cbind(TO_measures_i %>% st_drop_geometry(), measures_i)
TO_measures_i <- cbind(TO_measures_i, measures_i)
View(TO_measures_i)
TO_measures_i
data.frame(TO_measures_i)
cbind(data.frame(TO_measures_i), measures_i)
length(data.frame(TO_measures_i))
z <- (data.frame(TO_measures_i))
View(z)
measures_i[which(unlist(st_touches(measures_i, toronto_muni_bound)) == 1)]
measures_i[which(unlist(st_touches(measures_i, toronto_muni_bound)) == 0)]
View(TO_measures_i)
measures_i %>%
filter(st_intersects(., toronto_muni_bound, sparse = FALSE)[1,])
TO_measures_i <- measures_i %>%
filter(st_intersects(., toronto_muni_bound, sparse = FALSE)[1,])
View(TO_measures_i)
TO_measures_i <- measures_i %>%
filter(st_intersects(toronto_muni_bound, sparse = FALSE)[,1])
TO_measures_i <- measures_i %>%
filter(st_intersects(., toronto_muni_bound, sparse = FALSE)[,1])
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_avail / plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "log10")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "log10")
plot_avail / plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail / plot_c_access
---
title: "Testing function with tidy evaluation of variables"
output: html_document
---
plot_avail + plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail + plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail / plot_c_access
```{r fig.height=3}
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail / plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail / plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs / workers), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail / plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs / workers), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs/ workers), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail / plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_avail / plot_c_access
plot_avail <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral",  trans = "sqrt")
plot_c_access <- ggplot() +
geom_sf(data = TO_measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans = "sqrt")
plot_avail / plot_c_access
```{r fig.height=13}
plot_avail <- ggplot() +
geom_sf(data = measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_c_access <- ggplot() +
geom_sf(data = measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral")
plot_avail / plot_c_access
plot_c_access <- ggplot() +
geom_sf(data = measures_i,
aes(fill= c_access_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt")
plot_avail <- ggplot() +
geom_sf(data = measures_i,
aes(fill= avail_jobs), color = NA) +
scale_fill_distiller(palette = "Spectral", trans="sqrt")
plot_avail / plot_c_access
od_ft <- od_ft_tt %>% merge(gtha_taz %>% select(GTA06, workers) %>% st_drop_geometry(),
by.x = "Origin", by.y="GTA06", all.x = T)
od_ft <- od_ft %>% merge(gtha_taz %>% select(GTA06, jobs) %>% st_drop_geometry(),
by.x = "Destination", by.y="GTA06", all.x = T)
beta <- 0.0015
od_ft <- od_ft  %>%
mutate(f = exp(-beta * travel_time))
od_ft_tt_using3 <- od_ft %>%
mutate(V_ij = sp_avail3(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
f = f))
od_ft_tt_using2 <- od_ft %>%
mutate(V_ij = sp_avail2(.,
o_id = Origin,
d_id = Destination,
pop = workers,
opp = jobs,
f = f))
od_ft_tt_using1 <- od_ft %>%
mutate(V_ij = sp_avail(.,
o_id = Origin,
d_id = "Destination",
pop = workers,
opp = jobs,
f = f))
identical(od_ft_tt_using1,od_ft_tt_using2)
identical(od_ft_tt_using3,od_ft_tt_using2)
View(od_ft_tt_using3)
View(od_ft_tt_using2)
devtools::build()
